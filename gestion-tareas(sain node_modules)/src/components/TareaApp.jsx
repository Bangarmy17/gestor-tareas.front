import { useEffect, useState } from "react";
import { listTareaCompletada ,listTareaNoCompletada, update, create, remove } from "../services/TareaService";
import { TareaGrid } from "./TareaGrid";
import { TareaForm } from "./TareaForm";

export const TareaApp = () => {
    const [tareas, setTareas,] = useState([]);
    const [ tareasCompletadas, setTareasCompletadas] = useState([]);
    
    const [tareasSelected, setTareasSelected] = useState({
        titulo: '',
        descripcion: '',
        completada: false
    });
    const getTareas = async () => {
        try {
            const result = await listTareaNoCompletada(); //cambiÃ© el findall por esta funciÃ³n para que muestren las no completadas
            if (result && result.data) {
                setTareas(result.data);
            } else {
                console.error("La estructura de respuesta de la API no es la esperada.");
                setTareas([]);
            }
        } catch (error) {
            console.error("Error al obtener tareas:", error);
            setTareas([]);
        }
    }
    const getTareasCompletadas = async () => {
        try {
            const result = await listTareaCompletada(); //para mostrar las tareas completadas
            if (result && result.data) {
                setTareasCompletadas(result.data);
            } else {
                console.error("La estructura de respuesta de la API no es la esperada.");
                setTareasCompletadas([]);
            }
        } catch (error) {
            console.error("Error al obtener tareas:", error);
            setTareasCompletadas([]);
        }
    }
    useEffect(() => {
        getTareas([]);
        getTareasCompletadas([]);
    }, []);
   
    const handlerAddTarea = async (tarea) => {
        if (tarea.id > 0) {
            console.log('dddddddActualizar');
            const response = await update(tarea);
            setTareas(tareas.map(tar => {
                if (tar.id == response.data.id) {
                    return { ...response.data };
                }
                return tar;
            }));
            if(tarea.completada){
                setTareas(tareas.filter(t => t.id !== tarea.id));
                setTareasCompletadas([...tareasCompletadas,response.data]);
            }
        } else {
            console.log('dddddddCrear');
            const response = await create(tarea);
            setTareas([...tareas, { ...response.data }]);
        }
    }
    const handlerRemoveTarea = (id) => {
        remove(id);
        setTareas(tareas.filter(tarea => tarea.id != id));
    };
    const handlerTareaSelected = (tarea) => {
        setTareasSelected({ ...tarea });
    }
    return (
        <>
            <h1>Gestor de tareas</h1>
            <div>
                <TareaForm handlerAdd={handlerAddTarea} tareasSelected={tareasSelected} />
            </div>
            <div>
                <TareaGrid tareas={tareas} tareasCompletadas={tareasCompletadas} handlerRemove={handlerRemoveTarea} handlerSelected={handlerTareaSelected} />
            </div>
        </>
    )
}